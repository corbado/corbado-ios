//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class UsersAPI {

    /**
     Delete Current User
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GenericRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserDelete(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GenericRsp {
        return try await currentUserDeleteWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete Current User
     - DELETE /v2/me
     - Deletes current user
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenericRsp> 
     */
    open class func currentUserDeleteWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GenericRsp> {
        let localVariablePath = "/v2/me"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get Current User
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MeRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserGet(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> MeRsp {
        return try await currentUserGetWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get Current User
     - GET /v2/me
     - Gets current user
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MeRsp> 
     */
    open class func currentUserGetWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<MeRsp> {
        let localVariablePath = "/v2/me"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create Identifier
     
     - parameter meIdentifierCreateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GenericRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserIdentifierCreate(meIdentifierCreateReq: MeIdentifierCreateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GenericRsp {
        return try await currentUserIdentifierCreateWithRequestBuilder(meIdentifierCreateReq: meIdentifierCreateReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create Identifier
     - POST /v2/me/identifier
     - Creates an identifier
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter meIdentifierCreateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenericRsp> 
     */
    open class func currentUserIdentifierCreateWithRequestBuilder(meIdentifierCreateReq: MeIdentifierCreateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GenericRsp> {
        let localVariablePath = "/v2/me/identifier"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meIdentifierCreateReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete Identifier
     
     - parameter meIdentifierDeleteReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GenericRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserIdentifierDelete(meIdentifierDeleteReq: MeIdentifierDeleteReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GenericRsp {
        return try await currentUserIdentifierDeleteWithRequestBuilder(meIdentifierDeleteReq: meIdentifierDeleteReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete Identifier
     - DELETE /v2/me/identifier
     - Deletes an identifier
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter meIdentifierDeleteReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenericRsp> 
     */
    open class func currentUserIdentifierDeleteWithRequestBuilder(meIdentifierDeleteReq: MeIdentifierDeleteReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GenericRsp> {
        let localVariablePath = "/v2/me/identifier"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meIdentifierDeleteReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update Identifier
     
     - parameter meIdentifierUpdateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GenericRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserIdentifierUpdate(meIdentifierUpdateReq: MeIdentifierUpdateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GenericRsp {
        return try await currentUserIdentifierUpdateWithRequestBuilder(meIdentifierUpdateReq: meIdentifierUpdateReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update Identifier
     - PATCH /v2/me/identifier
     - Modifies an identifier (only permitted for username; identifierID will change)
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter meIdentifierUpdateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenericRsp> 
     */
    open class func currentUserIdentifierUpdateWithRequestBuilder(meIdentifierUpdateReq: MeIdentifierUpdateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GenericRsp> {
        let localVariablePath = "/v2/me/identifier"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meIdentifierUpdateReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Finish Identifier Verification
     
     - parameter meIdentifierVerifyFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GenericRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserIdentifierVerifyFinish(meIdentifierVerifyFinishReq: MeIdentifierVerifyFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GenericRsp {
        return try await currentUserIdentifierVerifyFinishWithRequestBuilder(meIdentifierVerifyFinishReq: meIdentifierVerifyFinishReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Finish Identifier Verification
     - POST /v2/me/identifier/verify/finish
     - Verifies challenge
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter meIdentifierVerifyFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenericRsp> 
     */
    open class func currentUserIdentifierVerifyFinishWithRequestBuilder(meIdentifierVerifyFinishReq: MeIdentifierVerifyFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GenericRsp> {
        let localVariablePath = "/v2/me/identifier/verify/finish"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meIdentifierVerifyFinishReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Start Identifier Verification
     
     - parameter meIdentifierVerifyStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GenericRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserIdentifierVerifyStart(meIdentifierVerifyStartReq: MeIdentifierVerifyStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GenericRsp {
        return try await currentUserIdentifierVerifyStartWithRequestBuilder(meIdentifierVerifyStartReq: meIdentifierVerifyStartReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Start Identifier Verification
     - POST /v2/me/identifier/verify/start
     - Creates challenge (only email otp and phone otp supported for now)
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter meIdentifierVerifyStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenericRsp> 
     */
    open class func currentUserIdentifierVerifyStartWithRequestBuilder(meIdentifierVerifyStartReq: MeIdentifierVerifyStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GenericRsp> {
        let localVariablePath = "/v2/me/identifier/verify/start"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meIdentifierVerifyStartReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Finish Passkey Append
     
     - parameter mePasskeysAppendFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await currentUserPasskeyAppendFinishWithRequestBuilder(mePasskeysAppendFinishReq: mePasskeysAppendFinishReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Finish Passkey Append
     - POST /v2/me/passkeys/append/finish
     - Finishes passkey append for current user
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter mePasskeysAppendFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func currentUserPasskeyAppendFinishWithRequestBuilder(mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/v2/me/passkeys/append/finish"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mePasskeysAppendFinishReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Start Passkey Append
     
     - parameter mePasskeysAppendStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MePasskeysAppendStartRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserPasskeyAppendStart(mePasskeysAppendStartReq: MePasskeysAppendStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> MePasskeysAppendStartRsp {
        return try await currentUserPasskeyAppendStartWithRequestBuilder(mePasskeysAppendStartReq: mePasskeysAppendStartReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Start Passkey Append
     - POST /v2/me/passkeys/append/start
     - Starts passkey append for current user
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter mePasskeysAppendStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MePasskeysAppendStartRsp> 
     */
    open class func currentUserPasskeyAppendStartWithRequestBuilder(mePasskeysAppendStartReq: MePasskeysAppendStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<MePasskeysAppendStartRsp> {
        let localVariablePath = "/v2/me/passkeys/append/start"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mePasskeysAppendStartReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MePasskeysAppendStartRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete User Passkey
     
     - parameter credentialID: (path) Credential ID from passkeys 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MePasskeyDeleteRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserPasskeyDelete(credentialID: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> MePasskeyDeleteRsp {
        return try await currentUserPasskeyDeleteWithRequestBuilder(credentialID: credentialID, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete User Passkey
     - DELETE /v2/me/passkeys/{credentialID}
     - Delete current user's passkeys
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter credentialID: (path) Credential ID from passkeys 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MePasskeyDeleteRsp> 
     */
    open class func currentUserPasskeyDeleteWithRequestBuilder(credentialID: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<MePasskeyDeleteRsp> {
        var localVariablePath = "/v2/me/passkeys/{credentialID}"
        let credentialIDPreEscape = "\(APIHelper.mapValueToPathItem(credentialID))"
        let credentialIDPostEscape = credentialIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{credentialID}", with: credentialIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MePasskeyDeleteRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Get User Passkeys
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MePasskeyRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserPasskeyGet(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> MePasskeyRsp {
        return try await currentUserPasskeyGetWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get User Passkeys
     - GET /v2/me/passkeys
     - Gets current user's passkeys
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MePasskeyRsp> 
     */
    open class func currentUserPasskeyGetWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<MePasskeyRsp> {
        let localVariablePath = "/v2/me/passkeys"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MePasskeyRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Logout User
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserSessionLogout(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await currentUserSessionLogoutWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Logout User
     - POST /v2/me/logout
     - Performs session logout
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func currentUserSessionLogoutWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/v2/me/logout"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Refresh Session
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: MeRefreshRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserSessionRefresh(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> MeRefreshRsp {
        return try await currentUserSessionRefreshWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Refresh Session
     - POST /v2/me/refresh
     - Performs session refresh
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<MeRefreshRsp> 
     */
    open class func currentUserSessionRefreshWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<MeRefreshRsp> {
        let localVariablePath = "/v2/me/refresh"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeRefreshRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update Current User
     
     - parameter meUpdateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GenericRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentUserUpdate(meUpdateReq: MeUpdateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> GenericRsp {
        return try await currentUserUpdateWithRequestBuilder(meUpdateReq: meUpdateReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update Current User
     - PATCH /v2/me
     - Updates current user
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter meUpdateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GenericRsp> 
     */
    open class func currentUserUpdateWithRequestBuilder(meUpdateReq: MeUpdateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<GenericRsp> {
        let localVariablePath = "/v2/me"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meUpdateReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
