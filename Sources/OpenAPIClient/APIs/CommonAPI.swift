//
// CommonAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CommonAPI {

    /**

     - parameter sessionID: (path) ID of session 
     - parameter remoteAddress: (query) Client&#39;s remote address (optional)
     - parameter userAgent: (query) Client&#39;s user agent (optional)
     - parameter sort: (query) Field sorting (optional)
     - parameter filter: (query) Field filtering (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Number of items per page (optional, default to 10)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: AllTypes
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func unused(sessionID: String, remoteAddress: String? = nil, userAgent: String? = nil, sort: String? = nil, filter: [String]? = nil, page: Int? = nil, pageSize: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> AllTypes {
        return try await unusedWithRequestBuilder(sessionID: sessionID, remoteAddress: remoteAddress, userAgent: userAgent, sort: sort, filter: filter, page: page, pageSize: pageSize, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /unused/{sessionID}
     - unused
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter sessionID: (path) ID of session 
     - parameter remoteAddress: (query) Client&#39;s remote address (optional)
     - parameter userAgent: (query) Client&#39;s user agent (optional)
     - parameter sort: (query) Field sorting (optional)
     - parameter filter: (query) Field filtering (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter pageSize: (query) Number of items per page (optional, default to 10)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<AllTypes> 
     */
    open class func unusedWithRequestBuilder(sessionID: String, remoteAddress: String? = nil, userAgent: String? = nil, sort: String? = nil, filter: [String]? = nil, page: Int? = nil, pageSize: Int? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<AllTypes> {
        var localVariablePath = "/unused/{sessionID}"
        let sessionIDPreEscape = "\(APIHelper.mapValueToPathItem(sessionID))"
        let sessionIDPostEscape = sessionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sessionID}", with: sessionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "remoteAddress": (wrappedValue: remoteAddress?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "userAgent": (wrappedValue: userAgent?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sort": (wrappedValue: sort?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filter[]": (wrappedValue: filter?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "page": (wrappedValue: page?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AllTypes>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
