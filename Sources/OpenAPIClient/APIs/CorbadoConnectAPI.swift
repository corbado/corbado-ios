//
// CorbadoConnectAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CorbadoConnectAPI {

    /**
     Finish connect append
     
     - parameter connectAppendFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectAppendFinishRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectAppendFinish(connectAppendFinishReq: ConnectAppendFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectAppendFinishRsp {
        return try await connectAppendFinishWithRequestBuilder(connectAppendFinishReq: connectAppendFinishReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Finish connect append
     - POST /v2/connect/append/finish
     - Finishes an initialized [Corbado Connect](https://docs.corbado.com/corbado-connect) passkey append process.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectAppendFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectAppendFinishRsp> 
     */
    open class func connectAppendFinishWithRequestBuilder(connectAppendFinishReq: ConnectAppendFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectAppendFinishRsp> {
        let localVariablePath = "/v2/connect/append/finish"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectAppendFinishReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectAppendFinishRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Initialize connect append
     
     - parameter connectAppendInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectAppendInitRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectAppendInit(connectAppendInitReq: ConnectAppendInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectAppendInitRsp {
        return try await connectAppendInitWithRequestBuilder(connectAppendInitReq: connectAppendInitReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Initialize connect append
     - POST /v2/connect/append/init
     - Initializes a [Corbado Connect](https://docs.corbado.com/corbado-connect) process for passkey append.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectAppendInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectAppendInitRsp> 
     */
    open class func connectAppendInitWithRequestBuilder(connectAppendInitReq: ConnectAppendInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectAppendInitRsp> {
        let localVariablePath = "/v2/connect/append/init"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectAppendInitReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectAppendInitRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Start connect append
     
     - parameter connectAppendStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectAppendStartRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectAppendStart(connectAppendStartReq: ConnectAppendStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectAppendStartRsp {
        return try await connectAppendStartWithRequestBuilder(connectAppendStartReq: connectAppendStartReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Start connect append
     - POST /v2/connect/append/start
     - Starts an initialized [Corbado Connect](https://docs.corbado.com/corbado-connect) passkey append process.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectAppendStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectAppendStartRsp> 
     */
    open class func connectAppendStartWithRequestBuilder(connectAppendStartReq: ConnectAppendStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectAppendStartRsp> {
        let localVariablePath = "/v2/connect/append/start"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectAppendStartReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectAppendStartRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create connect event
     
     - parameter connectEventCreateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectEventCreate(connectEventCreateReq: ConnectEventCreateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await connectEventCreateWithRequestBuilder(connectEventCreateReq: connectEventCreateReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create connect event
     - POST /v2/connect/events
     - Creates a new user generated [Corbado Connect](https://docs.corbado.com/corbado-connect) event.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectEventCreateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func connectEventCreateWithRequestBuilder(connectEventCreateReq: ConnectEventCreateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/v2/connect/events"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectEventCreateReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Finish connect login
     
     - parameter connectLoginFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectLoginFinishRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectLoginFinish(connectLoginFinishReq: ConnectLoginFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectLoginFinishRsp {
        return try await connectLoginFinishWithRequestBuilder(connectLoginFinishReq: connectLoginFinishReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Finish connect login
     - POST /v2/connect/login/finish
     - Finishes an initialized [Corbado Connect](https://docs.corbado.com/corbado-connect) login process.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectLoginFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectLoginFinishRsp> 
     */
    open class func connectLoginFinishWithRequestBuilder(connectLoginFinishReq: ConnectLoginFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectLoginFinishRsp> {
        let localVariablePath = "/v2/connect/login/finish"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectLoginFinishReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectLoginFinishRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Initialize connect login
     
     - parameter connectLoginInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectLoginInitRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectLoginInit(connectLoginInitReq: ConnectLoginInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectLoginInitRsp {
        return try await connectLoginInitWithRequestBuilder(connectLoginInitReq: connectLoginInitReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Initialize connect login
     - POST /v2/connect/login/init
     - Initializes a [Corbado Connect](https://docs.corbado.com/corbado-connect) process for login.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectLoginInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectLoginInitRsp> 
     */
    open class func connectLoginInitWithRequestBuilder(connectLoginInitReq: ConnectLoginInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectLoginInitRsp> {
        let localVariablePath = "/v2/connect/login/init"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectLoginInitReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectLoginInitRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Start connect login
     
     - parameter connectLoginStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectLoginStartRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectLoginStart(connectLoginStartReq: ConnectLoginStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectLoginStartRsp {
        return try await connectLoginStartWithRequestBuilder(connectLoginStartReq: connectLoginStartReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Start connect login
     - POST /v2/connect/login/start
     - Starts an initialized [Corbado Connect](https://docs.corbado.com/corbado-connect) login process.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectLoginStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectLoginStartRsp> 
     */
    open class func connectLoginStartWithRequestBuilder(connectLoginStartReq: ConnectLoginStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectLoginStartRsp> {
        let localVariablePath = "/v2/connect/login/start"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectLoginStartReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectLoginStartRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Delete connect passkey
     
     - parameter connectManageDeleteReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectManageDeleteRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectManageDelete(connectManageDeleteReq: ConnectManageDeleteReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectManageDeleteRsp {
        return try await connectManageDeleteWithRequestBuilder(connectManageDeleteReq: connectManageDeleteReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete connect passkey
     - POST /v2/connect/manage/delete
     - Deletes a passkey for a user identified by a [Corbado Connect](https://docs.corbado.com/corbado-connect) token.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectManageDeleteReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectManageDeleteRsp> 
     */
    open class func connectManageDeleteWithRequestBuilder(connectManageDeleteReq: ConnectManageDeleteReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectManageDeleteRsp> {
        let localVariablePath = "/v2/connect/manage/delete"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectManageDeleteReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectManageDeleteRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Initialize connect management
     
     - parameter connectManageInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectManageInitRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectManageInit(connectManageInitReq: ConnectManageInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectManageInitRsp {
        return try await connectManageInitWithRequestBuilder(connectManageInitReq: connectManageInitReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Initialize connect management
     - POST /v2/connect/manage/init
     - Initializes a [Corbado Connect](https://docs.corbado.com/corbado-connect) process for passkey management.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectManageInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectManageInitRsp> 
     */
    open class func connectManageInitWithRequestBuilder(connectManageInitReq: ConnectManageInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectManageInitRsp> {
        let localVariablePath = "/v2/connect/manage/init"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectManageInitReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectManageInitRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List connect passkeys
     
     - parameter connectManageListReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectManageListRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectManageList(connectManageListReq: ConnectManageListReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectManageListRsp {
        return try await connectManageListWithRequestBuilder(connectManageListReq: connectManageListReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List connect passkeys
     - POST /v2/connect/manage/list
     - Lists all passkeys for a user identifier by a [Corbado Connect](https://docs.corbado.com/corbado-connect) token.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectManageListReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectManageListRsp> 
     */
    open class func connectManageListWithRequestBuilder(connectManageListReq: ConnectManageListReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectManageListRsp> {
        let localVariablePath = "/v2/connect/manage/list"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectManageListReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectManageListRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Clear connect process
     
     - parameter connectProcessClearReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ConnectProcessClearRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func connectProcessClear(connectProcessClearReq: ConnectProcessClearReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ConnectProcessClearRsp {
        return try await connectProcessClearWithRequestBuilder(connectProcessClearReq: connectProcessClearReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Clear connect process
     - POST /v2/connect/process/clear
     - Remove process state for a [Corbado Connect](https://docs.corbado.com/corbado-connect) process.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter connectProcessClearReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ConnectProcessClearRsp> 
     */
    open class func connectProcessClearWithRequestBuilder(connectProcessClearReq: ConnectProcessClearReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ConnectProcessClearRsp> {
        let localVariablePath = "/v2/connect/process/clear"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: connectProcessClearReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectProcessClearRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
