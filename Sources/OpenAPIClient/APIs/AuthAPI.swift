//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AuthAPI {

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func blockSkip(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await blockSkipWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/block/skip
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func blockSkipWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/block/skip"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter eventCreateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func eventCreate(eventCreateReq: EventCreateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await eventCreateWithRequestBuilder(eventCreateReq: eventCreateReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/events
     - Creates a new user generated complete event.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter eventCreateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func eventCreateWithRequestBuilder(eventCreateReq: EventCreateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/v2/auth/events"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventCreateReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifierUpdateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identifierUpdate(identifierUpdateReq: IdentifierUpdateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await identifierUpdateWithRequestBuilder(identifierUpdateReq: identifierUpdateReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/identifier/update
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter identifierUpdateReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func identifierUpdateWithRequestBuilder(identifierUpdateReq: IdentifierUpdateReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/identifier/update"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identifierUpdateReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifierVerifyFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identifierVerifyFinish(identifierVerifyFinishReq: IdentifierVerifyFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await identifierVerifyFinishWithRequestBuilder(identifierVerifyFinishReq: identifierVerifyFinishReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/identifier/verify/finish
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter identifierVerifyFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func identifierVerifyFinishWithRequestBuilder(identifierVerifyFinishReq: IdentifierVerifyFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/identifier/verify/finish"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identifierVerifyFinishReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter identifierVerifyStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identifierVerifyStart(identifierVerifyStartReq: IdentifierVerifyStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await identifierVerifyStartWithRequestBuilder(identifierVerifyStartReq: identifierVerifyStartReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/identifier/verify/start
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter identifierVerifyStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func identifierVerifyStartWithRequestBuilder(identifierVerifyStartReq: IdentifierVerifyStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/identifier/verify/start"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identifierVerifyStartReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identifierVerifyStatus(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await identifierVerifyStatusWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v2/auth/identifier/verify/status
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func identifierVerifyStatusWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/identifier/verify/status"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter loginInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginInit(loginInitReq: LoginInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await loginInitWithRequestBuilder(loginInitReq: loginInitReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/login/init
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter loginInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func loginInitWithRequestBuilder(loginInitReq: LoginInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/login/init"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginInitReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter passkeyAppendFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func passkeyAppendFinish(passkeyAppendFinishReq: PasskeyAppendFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await passkeyAppendFinishWithRequestBuilder(passkeyAppendFinishReq: passkeyAppendFinishReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/passkey/append/finish
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter passkeyAppendFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func passkeyAppendFinishWithRequestBuilder(passkeyAppendFinishReq: PasskeyAppendFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/passkey/append/finish"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passkeyAppendFinishReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter passkeyAppendStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func passkeyAppendStart(passkeyAppendStartReq: PasskeyAppendStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await passkeyAppendStartWithRequestBuilder(passkeyAppendStartReq: passkeyAppendStartReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/passkey/append/start
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter passkeyAppendStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func passkeyAppendStartWithRequestBuilder(passkeyAppendStartReq: PasskeyAppendStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/passkey/append/start"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passkeyAppendStartReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter passkeyLoginFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func passkeyLoginFinish(passkeyLoginFinishReq: PasskeyLoginFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await passkeyLoginFinishWithRequestBuilder(passkeyLoginFinishReq: passkeyLoginFinishReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/passkey/login/finish
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter passkeyLoginFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func passkeyLoginFinishWithRequestBuilder(passkeyLoginFinishReq: PasskeyLoginFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/passkey/login/finish"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passkeyLoginFinishReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter passkeyLoginStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func passkeyLoginStart(passkeyLoginStartReq: PasskeyLoginStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await passkeyLoginStartWithRequestBuilder(passkeyLoginStartReq: passkeyLoginStartReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/passkey/login/start
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter passkeyLoginStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func passkeyLoginStartWithRequestBuilder(passkeyLoginStartReq: PasskeyLoginStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/passkey/login/start"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passkeyLoginStartReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter passkeyMediationFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func passkeyMediationFinish(passkeyMediationFinishReq: PasskeyMediationFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await passkeyMediationFinishWithRequestBuilder(passkeyMediationFinishReq: passkeyMediationFinishReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/passkey/mediation/finish
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter passkeyMediationFinishReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func passkeyMediationFinishWithRequestBuilder(passkeyMediationFinishReq: PasskeyMediationFinishReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/passkey/mediation/finish"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passkeyMediationFinishReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processComplete(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await processCompleteWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/process/complete
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func processCompleteWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/process/complete"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter preferredBlock: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processGet(preferredBlock: BlockType? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await processGetWithRequestBuilder(preferredBlock: preferredBlock, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v2/auth/process
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter preferredBlock: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func processGetWithRequestBuilder(preferredBlock: BlockType? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/process"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "preferredBlock": (wrappedValue: preferredBlock?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter processInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessInitRsp
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processInit(processInitReq: ProcessInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessInitRsp {
        return try await processInitWithRequestBuilder(processInitReq: processInitReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/process/init
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter processInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessInitRsp> 
     */
    open class func processInitWithRequestBuilder(processInitReq: ProcessInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessInitRsp> {
        let localVariablePath = "/v2/auth/process/init"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processInitReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessInitRsp>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func processReset(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await processResetWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/process/reset
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func processResetWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/process/reset"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter signupInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func signupInit(signupInitReq: SignupInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await signupInitWithRequestBuilder(signupInitReq: signupInitReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/signup/init
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter signupInitReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func signupInitWithRequestBuilder(signupInitReq: SignupInitReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/signup/init"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signupInitReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func socialVerifyCallback(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) {
        return try await socialVerifyCallbackWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /v2/auth/social/verify/callback
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func socialVerifyCallbackWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/v2/auth/social/verify/callback"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = apiConfiguration.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func socialVerifyFinish(body: JSONValue, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await socialVerifyFinishWithRequestBuilder(body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/social/verify/finish
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func socialVerifyFinishWithRequestBuilder(body: JSONValue, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/social/verify/finish"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter socialVerifyStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ProcessResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func socialVerifyStart(socialVerifyStartReq: SocialVerifyStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> ProcessResponse {
        return try await socialVerifyStartWithRequestBuilder(socialVerifyStartReq: socialVerifyStartReq, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /v2/auth/social/verify/start
     - tbd
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - API Key:
       - type: apiKey X-Corbado-ProjectID (HEADER)
       - name: projectID
     - parameter socialVerifyStartReq: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ProcessResponse> 
     */
    open class func socialVerifyStartWithRequestBuilder(socialVerifyStartReq: SocialVerifyStartReq, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<ProcessResponse> {
        let localVariablePath = "/v2/auth/social/verify/start"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: socialVerifyStartReq, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProcessResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
