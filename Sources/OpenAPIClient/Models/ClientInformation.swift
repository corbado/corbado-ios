//
// ClientInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ClientInformation: Sendable, Codable, ParameterConvertible, Hashable {

    public var bluetoothAvailable: Bool?
    public var clientEnvHandle: String?
    public var visitorId: String?
    /** Deprecated, use isUserVerifyingPlatformAuthenticatorAvailable instead */
    public var canUsePasskeys: Bool?
    public var isUserVerifyingPlatformAuthenticatorAvailable: Bool?
    public var isConditionalMediationAvailable: Bool?
    public var clientCapabilities: ClientCapabilities?
    public var javaScriptHighEntropy: JavaScriptHighEntropy?
    public var isNative: Bool?

    public init(bluetoothAvailable: Bool? = nil, clientEnvHandle: String? = nil, visitorId: String? = nil, canUsePasskeys: Bool? = nil, isUserVerifyingPlatformAuthenticatorAvailable: Bool? = nil, isConditionalMediationAvailable: Bool? = nil, clientCapabilities: ClientCapabilities? = nil, javaScriptHighEntropy: JavaScriptHighEntropy? = nil, isNative: Bool? = nil) {
        self.bluetoothAvailable = bluetoothAvailable
        self.clientEnvHandle = clientEnvHandle
        self.visitorId = visitorId
        self.canUsePasskeys = canUsePasskeys
        self.isUserVerifyingPlatformAuthenticatorAvailable = isUserVerifyingPlatformAuthenticatorAvailable
        self.isConditionalMediationAvailable = isConditionalMediationAvailable
        self.clientCapabilities = clientCapabilities
        self.javaScriptHighEntropy = javaScriptHighEntropy
        self.isNative = isNative
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bluetoothAvailable
        case clientEnvHandle
        case visitorId
        case canUsePasskeys
        case isUserVerifyingPlatformAuthenticatorAvailable
        case isConditionalMediationAvailable
        case clientCapabilities
        case javaScriptHighEntropy
        case isNative
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bluetoothAvailable, forKey: .bluetoothAvailable)
        try container.encodeIfPresent(clientEnvHandle, forKey: .clientEnvHandle)
        try container.encodeIfPresent(visitorId, forKey: .visitorId)
        try container.encodeIfPresent(canUsePasskeys, forKey: .canUsePasskeys)
        try container.encodeIfPresent(isUserVerifyingPlatformAuthenticatorAvailable, forKey: .isUserVerifyingPlatformAuthenticatorAvailable)
        try container.encodeIfPresent(isConditionalMediationAvailable, forKey: .isConditionalMediationAvailable)
        try container.encodeIfPresent(clientCapabilities, forKey: .clientCapabilities)
        try container.encodeIfPresent(javaScriptHighEntropy, forKey: .javaScriptHighEntropy)
        try container.encodeIfPresent(isNative, forKey: .isNative)
    }
}

