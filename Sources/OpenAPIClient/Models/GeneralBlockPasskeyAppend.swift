//
// GeneralBlockPasskeyAppend.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct GeneralBlockPasskeyAppend: Sendable, Codable, ParameterConvertible, Hashable {

    public enum Variant: String, Sendable, Codable, CaseIterable {
        case _default = "default"
        case afterHybrid = "after-hybrid"
        case afterError = "after-error"
        case afterNoCredential = "after-no-credential"
    }
    public var blockType: String
    public var challenge: String
    public var identifierValue: String
    public var identifierType: LoginIdentifierType
    public var autoSubmit: Bool
    public var passkeyIconSet: PasskeyIconSet
    public var variant: Variant

    public init(blockType: String, challenge: String, identifierValue: String, identifierType: LoginIdentifierType, autoSubmit: Bool, passkeyIconSet: PasskeyIconSet, variant: Variant) {
        self.blockType = blockType
        self.challenge = challenge
        self.identifierValue = identifierValue
        self.identifierType = identifierType
        self.autoSubmit = autoSubmit
        self.passkeyIconSet = passkeyIconSet
        self.variant = variant
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blockType
        case challenge
        case identifierValue
        case identifierType
        case autoSubmit
        case passkeyIconSet
        case variant
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(blockType, forKey: .blockType)
        try container.encode(challenge, forKey: .challenge)
        try container.encode(identifierValue, forKey: .identifierValue)
        try container.encode(identifierType, forKey: .identifierType)
        try container.encode(autoSubmit, forKey: .autoSubmit)
        try container.encode(passkeyIconSet, forKey: .passkeyIconSet)
        try container.encode(variant, forKey: .variant)
    }
}

