//
// Passkey.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Passkey: Sendable, Codable, ParameterConvertible, Hashable {

    public enum Transport: String, Sendable, Codable, CaseIterable {
        case usb = "usb"
        case nfc = "nfc"
        case ble = "ble"
        case _internal = "internal"
        case hybrid = "hybrid"
        case smartCard = "smart-card"
    }
    public enum Status: String, Sendable, Codable, CaseIterable {
        case pending = "pending"
        case active = "active"
    }
    public var id: String
    public var credentialID: String
    public var attestationType: String
    public var transport: [Transport]
    public var backupEligible: Bool
    public var backupState: Bool
    public var authenticatorAAGUID: String
    public var sourceOS: String
    public var sourceBrowser: String
    /** Timestamp of when the passkey was last used in yyyy-MM-dd'T'HH:mm:ss format */
    public var lastUsed: String
    /** Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format */
    public var created: String
    /** Status */
    public var status: Status
    public var aaguidDetails: AaguidDetails

    public init(id: String, credentialID: String, attestationType: String, transport: [Transport], backupEligible: Bool, backupState: Bool, authenticatorAAGUID: String, sourceOS: String, sourceBrowser: String, lastUsed: String, created: String, status: Status, aaguidDetails: AaguidDetails) {
        self.id = id
        self.credentialID = credentialID
        self.attestationType = attestationType
        self.transport = transport
        self.backupEligible = backupEligible
        self.backupState = backupState
        self.authenticatorAAGUID = authenticatorAAGUID
        self.sourceOS = sourceOS
        self.sourceBrowser = sourceBrowser
        self.lastUsed = lastUsed
        self.created = created
        self.status = status
        self.aaguidDetails = aaguidDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case credentialID
        case attestationType
        case transport
        case backupEligible
        case backupState
        case authenticatorAAGUID
        case sourceOS
        case sourceBrowser
        case lastUsed
        case created
        case status
        case aaguidDetails
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(credentialID, forKey: .credentialID)
        try container.encode(attestationType, forKey: .attestationType)
        try container.encode(transport, forKey: .transport)
        try container.encode(backupEligible, forKey: .backupEligible)
        try container.encode(backupState, forKey: .backupState)
        try container.encode(authenticatorAAGUID, forKey: .authenticatorAAGUID)
        try container.encode(sourceOS, forKey: .sourceOS)
        try container.encode(sourceBrowser, forKey: .sourceBrowser)
        try container.encode(lastUsed, forKey: .lastUsed)
        try container.encode(created, forKey: .created)
        try container.encode(status, forKey: .status)
        try container.encode(aaguidDetails, forKey: .aaguidDetails)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Passkey: Identifiable {}
