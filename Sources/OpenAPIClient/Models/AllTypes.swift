//
// AllTypes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AllTypes: Sendable, Codable, ParameterConvertible, Hashable {

    public var p1: Paging?
    public var p2: ClientInfo?
    /** generic ID */
    public var p3: String?
    /** ID of the user */
    public var p4: String?
    /** ID of the email */
    public var p5: String?
    /** ID of the email magic link */
    public var p6: String?
    /** ID of the phone number */
    public var p7: String?
    /** Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format */
    public var p8: String?
    /** Timestamp of when the entity was last updated in yyyy-MM-dd'T'HH:mm:ss format */
    public var p9: String?
    /** Timestamp of when the entity was deleted in yyyy-MM-dd'T'HH:mm:ss format */
    public var p10: String?
    /** ID of the device */
    public var p11: String?
    /** Additional payload in JSON format */
    public var p12: String?
    public var p13: Status?
    /** ID of project */
    public var p14: String?
    /** Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side */
    public var p15: String?
    public var p16: ErrorRsp?
    public var p17: [AuthMethod]?
    public var p18: FullUser?
    public var p19: LoginIdentifierType?
    /** ID of the email OTP */
    public var p20: String?
    public var p21: AppType?
    public var p22: SessionManagement?
    public var p23: HighEntropyValues?
    public var p24: LoginIdentifierConfig?
    public var p25: SocialProviderType?
    public var p26: IdentifierType?

    public init(p1: Paging? = nil, p2: ClientInfo? = nil, p3: String? = nil, p4: String? = nil, p5: String? = nil, p6: String? = nil, p7: String? = nil, p8: String? = nil, p9: String? = nil, p10: String? = nil, p11: String? = nil, p12: String? = nil, p13: Status? = nil, p14: String? = nil, p15: String? = nil, p16: ErrorRsp? = nil, p17: [AuthMethod]? = nil, p18: FullUser? = nil, p19: LoginIdentifierType? = nil, p20: String? = nil, p21: AppType? = nil, p22: SessionManagement? = nil, p23: HighEntropyValues? = nil, p24: LoginIdentifierConfig? = nil, p25: SocialProviderType? = nil, p26: IdentifierType? = nil) {
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3
        self.p4 = p4
        self.p5 = p5
        self.p6 = p6
        self.p7 = p7
        self.p8 = p8
        self.p9 = p9
        self.p10 = p10
        self.p11 = p11
        self.p12 = p12
        self.p13 = p13
        self.p14 = p14
        self.p15 = p15
        self.p16 = p16
        self.p17 = p17
        self.p18 = p18
        self.p19 = p19
        self.p20 = p20
        self.p21 = p21
        self.p22 = p22
        self.p23 = p23
        self.p24 = p24
        self.p25 = p25
        self.p26 = p26
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case p1
        case p2
        case p3
        case p4
        case p5
        case p6
        case p7
        case p8
        case p9
        case p10
        case p11
        case p12
        case p13
        case p14
        case p15
        case p16
        case p17
        case p18
        case p19
        case p20
        case p21
        case p22
        case p23
        case p24
        case p25
        case p26
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(p1, forKey: .p1)
        try container.encodeIfPresent(p2, forKey: .p2)
        try container.encodeIfPresent(p3, forKey: .p3)
        try container.encodeIfPresent(p4, forKey: .p4)
        try container.encodeIfPresent(p5, forKey: .p5)
        try container.encodeIfPresent(p6, forKey: .p6)
        try container.encodeIfPresent(p7, forKey: .p7)
        try container.encodeIfPresent(p8, forKey: .p8)
        try container.encodeIfPresent(p9, forKey: .p9)
        try container.encodeIfPresent(p10, forKey: .p10)
        try container.encodeIfPresent(p11, forKey: .p11)
        try container.encodeIfPresent(p12, forKey: .p12)
        try container.encodeIfPresent(p13, forKey: .p13)
        try container.encodeIfPresent(p14, forKey: .p14)
        try container.encodeIfPresent(p15, forKey: .p15)
        try container.encodeIfPresent(p16, forKey: .p16)
        try container.encodeIfPresent(p17, forKey: .p17)
        try container.encodeIfPresent(p18, forKey: .p18)
        try container.encodeIfPresent(p19, forKey: .p19)
        try container.encodeIfPresent(p20, forKey: .p20)
        try container.encodeIfPresent(p21, forKey: .p21)
        try container.encodeIfPresent(p22, forKey: .p22)
        try container.encodeIfPresent(p23, forKey: .p23)
        try container.encodeIfPresent(p24, forKey: .p24)
        try container.encodeIfPresent(p25, forKey: .p25)
        try container.encodeIfPresent(p26, forKey: .p26)
    }
}

