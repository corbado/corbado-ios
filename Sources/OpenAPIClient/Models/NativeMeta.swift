//
// NativeMeta.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct NativeMeta: Sendable, Codable, ParameterConvertible, Hashable {

    public enum DeviceOwnerAuth: String, Sendable, Codable, CaseIterable {
        case _none = "none"
        case code = "code"
        case biometrics = "biometrics"
    }
    public var platform: String
    public var platformVersion: String
    public var name: String?
    public var version: String?
    public var build: String?
    public var deviceOwnerAuth: DeviceOwnerAuth?
    public var isBluetoothAvailable: Bool?
    public var isBluetoothOn: Bool?
    public var isGooglePlayServices: Bool?
    public var isDeviceSecure: Bool?
    public var error: String?

    public init(platform: String, platformVersion: String, name: String? = nil, version: String? = nil, build: String? = nil, deviceOwnerAuth: DeviceOwnerAuth? = nil, isBluetoothAvailable: Bool? = nil, isBluetoothOn: Bool? = nil, isGooglePlayServices: Bool? = nil, isDeviceSecure: Bool? = nil, error: String? = nil) {
        self.platform = platform
        self.platformVersion = platformVersion
        self.name = name
        self.version = version
        self.build = build
        self.deviceOwnerAuth = deviceOwnerAuth
        self.isBluetoothAvailable = isBluetoothAvailable
        self.isBluetoothOn = isBluetoothOn
        self.isGooglePlayServices = isGooglePlayServices
        self.isDeviceSecure = isDeviceSecure
        self.error = error
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case platform
        case platformVersion
        case name
        case version
        case build
        case deviceOwnerAuth
        case isBluetoothAvailable
        case isBluetoothOn
        case isGooglePlayServices
        case isDeviceSecure
        case error
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(platform, forKey: .platform)
        try container.encode(platformVersion, forKey: .platformVersion)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(build, forKey: .build)
        try container.encodeIfPresent(deviceOwnerAuth, forKey: .deviceOwnerAuth)
        try container.encodeIfPresent(isBluetoothAvailable, forKey: .isBluetoothAvailable)
        try container.encodeIfPresent(isBluetoothOn, forKey: .isBluetoothOn)
        try container.encodeIfPresent(isGooglePlayServices, forKey: .isGooglePlayServices)
        try container.encodeIfPresent(isDeviceSecure, forKey: .isDeviceSecure)
        try container.encodeIfPresent(error, forKey: .error)
    }
}

