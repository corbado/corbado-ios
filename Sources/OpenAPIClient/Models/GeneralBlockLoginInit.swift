//
// GeneralBlockLoginInit.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct GeneralBlockLoginInit: Sendable, Codable, ParameterConvertible, Hashable {

    public var blockType: String
    public var conditionalUIChallenge: String?
    public var identifierValue: String
    public var isPhone: Bool
    public var isPhoneAvailable: Bool
    public var isEmailAvailable: Bool
    public var isUsernameAvailable: Bool
    public var socialData: SocialData
    public var fieldError: RequestError?
    public var error: RequestError?

    public init(blockType: String, conditionalUIChallenge: String? = nil, identifierValue: String, isPhone: Bool, isPhoneAvailable: Bool, isEmailAvailable: Bool, isUsernameAvailable: Bool, socialData: SocialData, fieldError: RequestError? = nil, error: RequestError? = nil) {
        self.blockType = blockType
        self.conditionalUIChallenge = conditionalUIChallenge
        self.identifierValue = identifierValue
        self.isPhone = isPhone
        self.isPhoneAvailable = isPhoneAvailable
        self.isEmailAvailable = isEmailAvailable
        self.isUsernameAvailable = isUsernameAvailable
        self.socialData = socialData
        self.fieldError = fieldError
        self.error = error
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blockType
        case conditionalUIChallenge
        case identifierValue
        case isPhone
        case isPhoneAvailable
        case isEmailAvailable
        case isUsernameAvailable
        case socialData
        case fieldError
        case error
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(blockType, forKey: .blockType)
        try container.encodeIfPresent(conditionalUIChallenge, forKey: .conditionalUIChallenge)
        try container.encode(identifierValue, forKey: .identifierValue)
        try container.encode(isPhone, forKey: .isPhone)
        try container.encode(isPhoneAvailable, forKey: .isPhoneAvailable)
        try container.encode(isEmailAvailable, forKey: .isEmailAvailable)
        try container.encode(isUsernameAvailable, forKey: .isUsernameAvailable)
        try container.encode(socialData, forKey: .socialData)
        try container.encodeIfPresent(fieldError, forKey: .fieldError)
        try container.encodeIfPresent(error, forKey: .error)
    }
}

