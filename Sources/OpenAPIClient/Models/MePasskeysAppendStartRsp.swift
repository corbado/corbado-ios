//
// MePasskeysAppendStartRsp.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct MePasskeysAppendStartRsp: Sendable, Codable, ParameterConvertible, Hashable {

    public enum AppendNotAllowedReason: String, Sendable, Codable, CaseIterable {
        case passkeyAlreadyExists = "passkey_already_exists"
        case passkeysNotSupported = "passkeys_not_supported"
    }
    public var newClientEnvHandle: String?
    public var appendNotAllowedReason: AppendNotAllowedReason?
    public var attestationOptions: String

    public init(newClientEnvHandle: String? = nil, appendNotAllowedReason: AppendNotAllowedReason? = nil, attestationOptions: String) {
        self.newClientEnvHandle = newClientEnvHandle
        self.appendNotAllowedReason = appendNotAllowedReason
        self.attestationOptions = attestationOptions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case newClientEnvHandle
        case appendNotAllowedReason
        case attestationOptions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(newClientEnvHandle, forKey: .newClientEnvHandle)
        try container.encodeIfPresent(appendNotAllowedReason, forKey: .appendNotAllowedReason)
        try container.encode(attestationOptions, forKey: .attestationOptions)
    }
}

