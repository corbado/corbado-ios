//
// ConnectAppendStartRsp.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ConnectAppendStartRsp: Sendable, Codable, ParameterConvertible, Hashable {

    public enum Variant: String, Sendable, Codable, CaseIterable {
        case _default = "default"
        case afterHybrid = "after-hybrid"
        case afterError = "after-error"
    }
    public var attestationOptions: String
    public var variant: Variant
    public var isRestrictedBrowser: Bool
    public var autoAppend: Bool
    public var conditionalAppend: Bool
    public var expiresMs: Int64
    public var customData: [String: String]?

    public init(attestationOptions: String, variant: Variant, isRestrictedBrowser: Bool, autoAppend: Bool, conditionalAppend: Bool, expiresMs: Int64, customData: [String: String]? = nil) {
        self.attestationOptions = attestationOptions
        self.variant = variant
        self.isRestrictedBrowser = isRestrictedBrowser
        self.autoAppend = autoAppend
        self.conditionalAppend = conditionalAppend
        self.expiresMs = expiresMs
        self.customData = customData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attestationOptions
        case variant
        case isRestrictedBrowser
        case autoAppend
        case conditionalAppend
        case expiresMs
        case customData
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(attestationOptions, forKey: .attestationOptions)
        try container.encode(variant, forKey: .variant)
        try container.encode(isRestrictedBrowser, forKey: .isRestrictedBrowser)
        try container.encode(autoAppend, forKey: .autoAppend)
        try container.encode(conditionalAppend, forKey: .conditionalAppend)
        try container.encode(expiresMs, forKey: .expiresMs)
        try container.encodeIfPresent(customData, forKey: .customData)
    }
}

