//
// BlockBodyData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public enum BlockBodyData: Sendable, Codable, ParameterConvertible, Hashable {
    case typeGeneralBlockCompleted(GeneralBlockCompleted)
    case typeGeneralBlockLoginInit(GeneralBlockLoginInit)
    case typeGeneralBlockPasskeyAppend(GeneralBlockPasskeyAppend)
    case typeGeneralBlockPasskeyAppended(GeneralBlockPasskeyAppended)
    case typeGeneralBlockPasskeyVerify(GeneralBlockPasskeyVerify)
    case typeGeneralBlockPostSignupEmailVerify(GeneralBlockPostSignupEmailVerify)
    case typeGeneralBlockSignupInit(GeneralBlockSignupInit)
    case typeGeneralBlockVerifyIdentifier(GeneralBlockVerifyIdentifier)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeGeneralBlockCompleted(let value):
            try container.encode(value)
        case .typeGeneralBlockLoginInit(let value):
            try container.encode(value)
        case .typeGeneralBlockPasskeyAppend(let value):
            try container.encode(value)
        case .typeGeneralBlockPasskeyAppended(let value):
            try container.encode(value)
        case .typeGeneralBlockPasskeyVerify(let value):
            try container.encode(value)
        case .typeGeneralBlockPostSignupEmailVerify(let value):
            try container.encode(value)
        case .typeGeneralBlockSignupInit(let value):
            try container.encode(value)
        case .typeGeneralBlockVerifyIdentifier(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(GeneralBlockCompleted.self) {
            self = .typeGeneralBlockCompleted(value)
        } else if let value = try? container.decode(GeneralBlockLoginInit.self) {
            self = .typeGeneralBlockLoginInit(value)
        } else if let value = try? container.decode(GeneralBlockPasskeyAppend.self) {
            self = .typeGeneralBlockPasskeyAppend(value)
        } else if let value = try? container.decode(GeneralBlockPasskeyAppended.self) {
            self = .typeGeneralBlockPasskeyAppended(value)
        } else if let value = try? container.decode(GeneralBlockPasskeyVerify.self) {
            self = .typeGeneralBlockPasskeyVerify(value)
        } else if let value = try? container.decode(GeneralBlockPostSignupEmailVerify.self) {
            self = .typeGeneralBlockPostSignupEmailVerify(value)
        } else if let value = try? container.decode(GeneralBlockSignupInit.self) {
            self = .typeGeneralBlockSignupInit(value)
        } else if let value = try? container.decode(GeneralBlockVerifyIdentifier.self) {
            self = .typeGeneralBlockVerifyIdentifier(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of BlockBodyData"))
        }
    }
}

