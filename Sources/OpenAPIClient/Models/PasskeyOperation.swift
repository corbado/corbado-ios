//
// PasskeyOperation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct PasskeyOperation: Sendable, Codable, ParameterConvertible, Hashable {

    public enum OperationType: String, Sendable, Codable, CaseIterable {
        case append = "append"
        case verify = "verify"
    }
    public enum CeremonyType: String, Sendable, Codable, CaseIterable {
        case local = "local"
        case cda = "cda"
        case securityKey = "security-key"
    }
    public var operationType: OperationType
    public var identifierValue: String
    public var identifierType: LoginIdentifierType
    public var ceremonyType: CeremonyType
    public var aaguidDetails: AaguidDetails?

    public init(operationType: OperationType, identifierValue: String, identifierType: LoginIdentifierType, ceremonyType: CeremonyType, aaguidDetails: AaguidDetails? = nil) {
        self.operationType = operationType
        self.identifierValue = identifierValue
        self.identifierType = identifierType
        self.ceremonyType = ceremonyType
        self.aaguidDetails = aaguidDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case operationType
        case identifierValue
        case identifierType
        case ceremonyType
        case aaguidDetails
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(operationType, forKey: .operationType)
        try container.encode(identifierValue, forKey: .identifierValue)
        try container.encode(identifierType, forKey: .identifierType)
        try container.encode(ceremonyType, forKey: .ceremonyType)
        try container.encodeIfPresent(aaguidDetails, forKey: .aaguidDetails)
    }
}

