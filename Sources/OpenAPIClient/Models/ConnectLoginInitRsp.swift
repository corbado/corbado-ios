//
// ConnectLoginInitRsp.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ConnectLoginInitRsp: Sendable, Codable, ParameterConvertible, Hashable {

    public var token: String
    public var newClientEnvHandle: String?
    public var newClientState: String?
    public var expiresAt: Int64
    public var frontendApiUrl: String
    public var loginAllowed: Bool
    public var conditionalUIChallenge: String?
    public var flags: [String: String]

    public init(token: String, newClientEnvHandle: String? = nil, newClientState: String? = nil, expiresAt: Int64, frontendApiUrl: String, loginAllowed: Bool, conditionalUIChallenge: String? = nil, flags: [String: String]) {
        self.token = token
        self.newClientEnvHandle = newClientEnvHandle
        self.newClientState = newClientState
        self.expiresAt = expiresAt
        self.frontendApiUrl = frontendApiUrl
        self.loginAllowed = loginAllowed
        self.conditionalUIChallenge = conditionalUIChallenge
        self.flags = flags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case token
        case newClientEnvHandle
        case newClientState
        case expiresAt
        case frontendApiUrl
        case loginAllowed
        case conditionalUIChallenge
        case flags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(token, forKey: .token)
        try container.encodeIfPresent(newClientEnvHandle, forKey: .newClientEnvHandle)
        try container.encodeIfPresent(newClientState, forKey: .newClientState)
        try container.encode(expiresAt, forKey: .expiresAt)
        try container.encode(frontendApiUrl, forKey: .frontendApiUrl)
        try container.encode(loginAllowed, forKey: .loginAllowed)
        try container.encodeIfPresent(conditionalUIChallenge, forKey: .conditionalUIChallenge)
        try container.encode(flags, forKey: .flags)
    }
}

