//
// ConnectAppendInitRsp.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ConnectAppendInitRsp: Sendable, Codable, ParameterConvertible, Hashable {

    public var processID: String
    public var newClientEnvHandle: String?
    public var expiresAt: Int64
    public var frontendApiUrl: String
    public var appendAllowed: Bool
    public var flags: [String: String]
    public var newClientState: String?

    public init(processID: String, newClientEnvHandle: String? = nil, expiresAt: Int64, frontendApiUrl: String, appendAllowed: Bool, flags: [String: String], newClientState: String? = nil) {
        self.processID = processID
        self.newClientEnvHandle = newClientEnvHandle
        self.expiresAt = expiresAt
        self.frontendApiUrl = frontendApiUrl
        self.appendAllowed = appendAllowed
        self.flags = flags
        self.newClientState = newClientState
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case processID
        case newClientEnvHandle
        case expiresAt
        case frontendApiUrl
        case appendAllowed
        case flags
        case newClientState
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(processID, forKey: .processID)
        try container.encodeIfPresent(newClientEnvHandle, forKey: .newClientEnvHandle)
        try container.encode(expiresAt, forKey: .expiresAt)
        try container.encode(frontendApiUrl, forKey: .frontendApiUrl)
        try container.encode(appendAllowed, forKey: .appendAllowed)
        try container.encode(flags, forKey: .flags)
        try container.encodeIfPresent(newClientState, forKey: .newClientState)
    }
}

