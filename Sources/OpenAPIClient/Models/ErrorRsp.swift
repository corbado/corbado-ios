//
// ErrorRsp.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ErrorRsp: Sendable, Codable, ParameterConvertible, Hashable {

    public static let httpStatusCodeRule = NumericRule<Int>(minimum: 200, exclusiveMinimum: false, maximum: 599, exclusiveMaximum: false, multipleOf: nil)
    /** HTTP status code of operation */
    public var httpStatusCode: Int
    public var message: String
    public var requestData: RequestData
    /** Runtime in seconds for this request */
    public var runtime: Float
    public var data: JSONValue?
    public var error: ErrorRspAllOfError

    public init(httpStatusCode: Int, message: String, requestData: RequestData, runtime: Float, data: JSONValue? = nil, error: ErrorRspAllOfError) {
        self.httpStatusCode = httpStatusCode
        self.message = message
        self.requestData = requestData
        self.runtime = runtime
        self.data = data
        self.error = error
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case httpStatusCode
        case message
        case requestData
        case runtime
        case data
        case error
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(httpStatusCode, forKey: .httpStatusCode)
        try container.encode(message, forKey: .message)
        try container.encode(requestData, forKey: .requestData)
        try container.encode(runtime, forKey: .runtime)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encode(error, forKey: .error)
    }
}

